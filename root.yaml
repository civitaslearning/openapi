openapi: 3.0.3
info:
  title: Civitas Learning PartnerHub API
  version: 0.1.0
  description: Access your Civitas Learning instance over HTTPS with JSON.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      description: >
        A container that provides error responses for invalid or failed API calls.
      required:
        - message
      properties:
        message:
          type: string
    PartnerKey:
      type: string
      description: >
        A unique string from the partner's point of view that we will use as a
        surrogate key to identify an individual.
        Note that we have our own internal keys as well, but you won't be 
        expected to keep track of them.
        Note that there is no 'changing' of a PartnerKey. Any value we haven't
        seen before will be treated as a whole new entity.
    AdvisorKey:
      $ref: "#/components/schemas/PartnerKey"
    StudentKey:
      $ref: "#/components/schemas/PartnerKey"
    EmailAddress:
      type: string
      format: email
      description: Email address must be unique in your instance.
    PhysicalAddress:
      type: object
      description: >
        An old fashioned real work physical address, like you would put on an envelope,
        and stuff in a mailbox.
      properties:
        line1:
          type: string
        line2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
    AdvisorToStudentAssignment:
      type: object
      description: >
        Assigns a single student to a single advisor with an AdvisorType that
        describes the relationship between Student and Advisor.
      properties:
        advisorType:
          $ref: "#/components/schemas/AdvisorType"
        studentKey:
          $ref: "#/components/schemas/StudentKey"
    AdvisorRole:
      type: string
      description: >
        An assignment of data access permissions to an individual Advisor.
        Combined with the `studentSuccessUnits` on an Advisor,
        determines which students are visible.
      enum:
        - Director
        - Advisor+
        - Advisor
        - AdministrativeAssistant
        - Faculty
    AdvisorType:
      type: string
      description: >
        Describes the advising relationship between Advisor and Student, for 
        example an Academic Advisor and a Career Counsellor.
        This list of AdvisorType(s) is customizable per Partner.
    StudentSuccessUnitName:
      type: string
      description: >
        A custom grouping of advisors and students.
    AdvisorPermission:
      type: string
      description: >
        An individual named permission that can be granted to a user.
    VisibilityOption:
      type: string
      description: >
        A reverse permission used to enable Student(s) access to Advisor(s)
      enum:
        - AllStudents
        - NoStudents
        - AssignedStudents
    Advisor:
      type: object
      description: >
        An Advisor is a user allowed to access functionality in our Advising 
        application.
      required:
        - advisorKey
        - firstName
        - lastName
        - email
      properties:
        advisorKey:
          $ref: "#/components/schemas/AdvisorKey"
        firstName:
          type: string
        lastName:
          type: string
        email:
          $ref: "#/components/schemas/EmailAddress"
          description: Email address must be unique in your instance.
        title:
          type: string
        officeAddress:
          $ref: "#/components/schemas/PhysicalAddress"
        primaryRole:
          $ref: "#/components/schemas/AdvisorRole"
        advisorType:
          $ref: "#/components/schemas/AdvisorType"
        studentSuccessUnits:
          type: array
          items:
            $ref: "#/components/schemas/StudentSuccessUnitName"
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/AdvisorPermission"
        calendarVisibility:
          description: >
            Control which Student(s) can see this Advisor's calendar. 
          $ref: "#/components/schemas/VisibilityOption"
        directoryVisibility:
          description: >
            Control which Student(s) can see this Advisor in the Advisor directory.
          $ref: "#/components/schemas/VisibilityOption"
        messagingVisibility:
          description: >
            Control which Student(s) can send messages to this Advisor.
          $ref: "#/components/schemas/VisibilityOption"
        assistantTo:
          description: >
            An Advisor may be an Assitant to zero or more other Advisor(s).
            This allows access to the assisted Advisor's calendar.
          type: array
          items:
            $ref: "#/components/schemas/AdvisorKey"
paths:
  /ssu:
    get:
      summary: >
        List every available StudentSuccesUnit (SSU) configured in your partner
        instance.
      security:
        - bearerAuth: []
      responses:
        200:
          description: >
            An array of StudentSuccessUnitName(s).
            These are valid values to assign to and Advisor `studentSuccessUnits`.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudentSuccessUnitName"
        401:
          description: >
            Authentication error from an invalid JWT.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /advisors:
    post:
      summary: >
        Synchronize an Advisor to your Partner instance.

        If an Advisor is new, meaning the `advisorKey` is previously unknown in
        our databases we'll go ahead and create a new Advisor for you and synch all the data.

        If an Advisor exists, meaning the `advisorKey` is already known in our
        databases, we'll go ahead and change the advisor properties to match 
        what you have sent.

        This approach eliminates the need for you to ask in advance if we
        already know about a user. And it eliminates the need for you to 
        try and keep track of Advisors you have have already sent us.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Advisor"
      responses:
        200:
          description: >
            An empty response when successful. No news is good news.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /advisors/permissions:
    get:
      summary: >
        List every available AdvisorPermission configured in your partner instance.
      security:
        - bearerAuth: []
      responses:
        200:
          description: >
            An array of AdvisorPermission(s).
            These are valid values to assign to and Advisor `permissions`.
            This will include the EnableSMS permission for Partner instances
            with SMS enabled.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdvisorPermission"
        401:
          description: >
            Authentication error from an invalid JWT.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /advisors/types:
    get:
      summary: >
        List every available AdvisorType configured in your partner instance.
      security:
        - bearerAuth: []
      responses:
        200:
          description: >
            An array of AdvisorType(s).
            These are valid values to assign to and Advisor `advisorType`.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdvisorType"
        401:
          description: >
            Authentication error from an invalid JWT.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /advisors/{advisorKey}:
    delete:
      summary: >
        Deactivates a user in your Partner instance.
        This user is no longer able to log in or use Advising.
        You can restore a user with a subsequent POST to /advisors.
      security:
        - bearerAuth: []
      parameters:
        - name: advisorKey
          in: path
          required: true
          description: The specific Advisor you want to deactivate.
          schema:
            $ref: "#/components/schemas/AdvisorKey"
      responses:
        200:
          description: >
            An empty response when successful. No news is good news.
        401:
          description: >
            Authentication error from an invalid JWT.
        404:
          description: >
            An empty response when the `advisorKey` specified is unknown in our databases.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /advisors/{advisorKey}/students:
    post:
      summary: >
        Synchronize the list of Students assigned to an Advisor in your Partner instance.

        Synchronizing your entire student assignment list. We'll sort out which 
        students to add or delete from an individual Advisor. This avoids the need
        for you to read or keep track of previous advisor assignments.

        A given advisor MAY have multiple assignemnts to a student if
        the Advisor has multiple AdvisorType(s) assigned.

        If you request an AdvisorType to Student pairing and that AdvisorType
        is not on the Advisor, we'll go ahead and add it for you.
      security:
        - bearerAuth: []
      parameters:
        - name: advisorKey
          in: path
          required: true
          description: The specific Advisor you want to assign Students.
          schema:
            $ref: "#/components/schemas/AdvisorKey"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AdvisorToStudentAssignment"
      responses:
        200:
          description: >
            The list of students assigned to this advisor.

            It is possible this list does not match the input request if some
            of the StudentKeys provided are unknown in our databases.

            You can do a set subtraction between your request and this response
            to find students that are missing in our databases, or to detect that
            StudentKeys you passed are incorrect.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudentKey"
        401:
          description: >
            Authentication error from an invalid JWT.
        404:
          description: >
            An empty response when the `advisorKey` specified is unknown in our databases.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    

    